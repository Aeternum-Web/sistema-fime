@page "/login"
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager

<div class="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 flex items-center justify-center p-4">
    <div class="w-full max-w-md">
        <!-- Header -->
        <div class="text-center mb-8">
            <div class="mx-auto h-12 w-12 bg-gradient-to-br from-blue-600 to-indigo-700 rounded-xl flex items-center justify-center shadow-lg mb-4">
                <i class="bi bi-mortarboard-fill text-white text-xl"></i>
            </div>
            <h1 class="text-2xl font-bold text-gray-900 mb-2">Bienvenido de vuelta</h1>
            <p class="text-gray-600 text-sm">Inicia sesión en Sistema FIME</p>
        </div>
        
        <!-- Form Card -->
        <div class="bg-white rounded-xl shadow-lg border border-gray-100 p-6">
            <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" class="space-y-4">
                <DataAnnotationsValidator />
                
                <!-- Email Field -->
                <div>
                    <label for="email" class="block text-sm font-medium text-gray-700 mb-2">
                        <i class="bi bi-envelope mr-2 text-blue-600"></i>Correo electrónico
                    </label>
                    <div class="relative">
                        <InputText @bind-Value="loginModel.Email" 
                                  id="email" 
                                  type="email" 
                                  autocomplete="email" 
                                  required 
                                  class="w-full px-4 py-3 pl-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors" 
                                  placeholder="tu@email.com" />
                        <i class="bi bi-at absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
                    </div>
                </div>

                <!-- Password Field -->
                <div>
                    <label for="password" class="block text-sm font-medium text-gray-700 mb-2">
                        <i class="bi bi-lock mr-2 text-blue-600"></i>Contraseña
                    </label>
                    <div class="relative">
                        <InputText @bind-Value="loginModel.Password" 
                                  id="password" 
                                  type="password" 
                                  autocomplete="current-password" 
                                  required 
                                  class="w-full px-4 py-3 pl-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors" 
                                  placeholder="••••••••" />
                        <i class="bi bi-key absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
                    </div>
                </div>

                <!-- Validation Messages -->
                <ValidationSummary class="bg-red-50 border border-red-200 rounded-lg p-3 text-red-700 text-sm" />

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="bg-red-50 border border-red-200 rounded-lg p-3 flex items-center gap-2">
                        <i class="bi bi-exclamation-triangle-fill text-red-500"></i>
                        <span class="text-red-700 text-sm">@errorMessage</span>
                    </div>
                }

                <!-- Remember Me & Forgot Password -->
                <div class="flex items-center justify-between text-sm">
                    <label class="flex items-center gap-2">
                        <input type="checkbox" @bind="loginModel.RememberMe" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
                        <span class="text-gray-700">Recordarme</span>
                    </label>
                    <a href="#" class="text-blue-600 hover:text-blue-500 font-medium">¿Olvidaste tu contraseña?</a>
                </div>

                <!-- Submit Button -->
                <button type="submit" 
                        disabled="@isLoading"
                        class="w-full bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white font-medium py-3 px-4 rounded-lg transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2">
                    @if (isLoading)
                    {
                        <svg class="animate-spin h-4 w-4" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        <span>Iniciando sesión...</span>
                    }
                    else
                    {
                        <i class="bi bi-box-arrow-in-right"></i>
                        <span>Iniciar Sesión</span>
                    }
                </button>

                <!-- Test Credentials -->
                <div class="bg-blue-50 border border-blue-200 rounded-lg p-3">
                    <div class="flex items-center gap-2 mb-2">
                        <i class="bi bi-info-circle text-blue-600"></i>
                        <span class="text-sm font-medium text-blue-800">Credenciales de prueba</span>
                    </div>
                    <div class="text-xs text-blue-700 space-y-1">
                        <div><i class="bi bi-person-badge mr-1"></i><strong>Admin:</strong> admin@fime.com / admin123</div>
                        <div><i class="bi bi-mortarboard mr-1"></i><strong>Estudiante:</strong> estudiante@fime.com / estudiante123</div>
                    </div>
                </div>

                <!-- Register Link -->
                <div class="text-center pt-4 border-t border-gray-200">
                    <span class="text-gray-600 text-sm">
                        ¿No tienes cuenta? 
                        <a href="/registro" class="text-blue-600 hover:text-blue-500 font-medium">
                            Regístrate aquí
                        </a>
                    </span>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;
        
        try
        {
            // Aquí implementarías la lógica de autenticación
            // Por ejemplo, llamar a un servicio de autenticación
            await Task.Delay(1000); // Simular llamada a API
            
            // Ejemplo de validación básica
            if (loginModel.Email == "admin@fime.com" && loginModel.Password == "admin123")
            {
                // Redirigir al dashboard
                NavigationManager.NavigateTo("/dashboard");
            }
            else if (loginModel.Email == "estudiante@fime.com" && loginModel.Password == "estudiante123")
            {
                // Redirigir al dashboard para estudiantes
                NavigationManager.NavigateTo("/dashboard");
            }
            else
            {
                errorMessage = "Credenciales incorrectas. Verifica tu email y contraseña.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error al iniciar sesión. Intenta nuevamente.";
            Console.WriteLine($"Error en login: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "El correo electrónico es requerido")]
        [EmailAddress(ErrorMessage = "Formato de correo electrónico inválido")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "La contraseña es requerida")]
        [MinLength(6, ErrorMessage = "La contraseña debe tener al menos 6 caracteres")]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; } = false;
    }
}