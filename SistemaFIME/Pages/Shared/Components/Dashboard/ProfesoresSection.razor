@* Profesores Section Component *@
<div class="mb-12">
    <div class="flex justify-between items-center mb-8">
        <div class="flex items-center space-x-3">
            <div class="w-10 h-10 bg-gradient-to-br from-yellow-400 to-yellow-500 rounded-lg flex items-center justify-center">
                <i class="bi bi-award text-white text-lg"></i>
            </div>
            <h2 class="text-3xl font-bold text-gray-800">Profesores Destacados</h2>
        </div>
        <button class="bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-lg transition-colors font-medium shadow-md hover:shadow-lg flex items-center space-x-2" 
                @onclick="ToggleProfesores">
            <i class="bi @(MostrarTodos ? "bi-eye-slash" : "bi-eye")"></i>
            <span>@(MostrarTodos ? "Ver menos" : "Ver todos")</span>
        </button>
    </div>
    
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        @foreach (var profesor in (MostrarTodos ? Profesores : Profesores.Take(8)))
        {
            <ProfesorCard Profesor="profesor" OnProfesorSelected="OnProfesorSelected" />
        }
    </div>
    
    @if (!MostrarTodos && Profesores.Count > 8)
    {
        <div class="text-center mt-8">
            <p class="text-gray-500 text-sm">Mostrando 8 de @Profesores.Count profesores</p>
        </div>
    }
</div>

@code {
    [Parameter] public List<Profesor> Profesores { get; set; } = new();
    [Parameter] public EventCallback<Profesor> OnProfesorSelected { get; set; }
    [Parameter] public bool MostrarTodos { get; set; }
    [Parameter] public EventCallback OnToggleProfesores { get; set; }
    
    private async Task ToggleProfesores()
    {
        await OnToggleProfesores.InvokeAsync();
    }
}